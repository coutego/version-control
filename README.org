#+title: Readme

* What
This is an implementation of a git-like version control
system.

Only the core functionality is (will be) implemented.
Full compatibility, both on the internal structures (specially the index)
and the objects in the repo is out of scope.
Having said that, the internal design of git is used as inspiration or
used directly when possible. For example, the repo structure is the same
as in git.

* Why
Building something is the best way of understanding it.
My understanding of Git is limited, so...

This is also an opportunity for me to implement a non totally trivial
project in modern Python,
so it's a nice way of killing two birds with one snake.

* How
The implementation is quite straigtforward, if not very refined.
The main structure can be understood by having a look at the Protocols
of the building blocks of the system, defined in cv/prots.py.

* Usage
Just download the repo, put it in some directory in your PYTHONPATH, which makes it possible to invoke it with 'python -m vc'.
In order to make it more ergonomic, you can alias it:

#+begin_src sh
$ alias vc='python -m vc'
#+end_src

** Supported commands
For the time being, there are only a handful of commands implemented,
with very few options.
The following already work:

#+begin_src sh
$ vc init
$ vc add <files>
$ vc commit -m <msg>
$ vc hash-object [--stdin] [-w] <file>
$ vc cat-file [-e] [-p] [-t] <hash>
#+end_src
